class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() > nums2.size()) return findMedianSortedArrays(nums2, nums1);

        // I know now that nums1 is smaller and nums2 is larger in size
        int n = nums1.size(), m = nums2.size();
        int middle = (n + m + 1) / 2;

        int low = 0, high = n;
        while(low <= high) {
            int l1 = low + (high - low) / 2;
            int l2 = middle - l1;

            int a1p1 = l1 == 0 ? INT_MIN : nums1[l1 - 1];
            int a1p2 = l1 == n ? INT_MAX : nums1[l1];
            int a2p1 = l2 == 0 ? INT_MIN : nums2[l2 - 1];
            int a2p2 = l2 == m ? INT_MAX : nums2[l2];

            if(a1p1 <= a2p2 && a2p1 <= a1p2) {
                cout << l1 << endl;
                if((n + m) % 2 == 1) return max(a1p1, a2p1);
                int maxiInP1 = max(a1p1, a2p1);
                int miniInP2 = min(a1p2, a2p2);
                return (maxiInP1 + miniInP2) / 2.0;
            } else if(a1p1 > a2p2) {
                high = l1 - 1;
            } else {
                low = l1 + 1;
            }
        }
        return -1;
    }
};
