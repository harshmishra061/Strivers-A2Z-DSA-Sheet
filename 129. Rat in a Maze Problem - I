class Solution {
    int n;
    vector<pair<int, char>> dir;
    void findPath(int i, int j, vector<vector<int>>& mat, string& curr, vector<string>& res) {
        if(i == n - 1 && j == n - 1) {
            res.push_back(curr);
            return;
        }
        
        mat[i][j] = 0;
        for(int k = 0;k < 4;k++) {
            int newi = i + dir[k].first;
            int newj = j + dir[k + 1].first;
            char ch = dir[k].second;
            
            if(newi >= 0 && newj >= 0 && newi < n && newj < n && mat[newi][newj] == 1) {
                curr += ch;
                findPath(newi, newj, mat, curr, res);
                curr.pop_back();
            }
        }
        mat[i][j] = 1;
    }
  public:
    vector<string> findPath(vector<vector<int>> &mat) {
        n = mat.size();
        dir = {{0, 'R'}, {1, 'D'}, {0, 'L'}, {-1, 'U'}, {0, '@'}};
        if(mat[0][0] == 0 || mat[n - 1][n - 1] == 0) return {};
        
        vector<string> res;
        string curr = "";
        findPath(0, 0, mat, curr, res);
        return res;
    }
};
