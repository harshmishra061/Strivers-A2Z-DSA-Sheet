class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return nums[0];
        if(nums[0] != nums[1]) return nums[0];
        if(nums[n - 2] != nums[n - 1]) return nums[n - 1];

        int low = 0, high = n - 1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid - 1] != nums[mid] && nums[mid] != nums[mid + 1]) return nums[mid];
            else if(nums[mid - 1] == nums[mid]) {
                int len = mid - low + 1;
                if(len % 2 == 0) {
                    low = mid + 1;
                } else {
                    high = mid - 2;
                }
            } else {
                int len = high - mid + 1;
                if(len % 2 == 0) {
                    high = mid - 1;
                } else {
                    low = mid + 2;
                }
            }
        }
        return -1;
    }
};
