class Solution {
    bool validToPut(int r, int c, vector<string>& board) {
        for(int i = 0;i < board.size();i++) {
            for(int j = 0;j < board[0].size();j++) {
                if(board[i][j] == 'Q' && (j == c || i + j == r + c || i + c == r + j)) return false;
            }
        }

        return true;
    }


    void solveNQueens(int r, vector<string>& board, vector<vector<string>>& res) {
        if(r == board.size()) {
            res.push_back(board);
            return;
        }
        for(int c = 0; c < board.size();c++) {
            if(!validToPut(r, c, board)) continue;

            board[r][c] = 'Q';
            solveNQueens(r + 1, board, res);
            board[r][c] = '.';
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        vector<string> board(n);
        for(int i = 0;i < n;i++) {
            for(int j = 0;j < n;j++) board[i].push_back('.');
        }
        solveNQueens(0, board, res);
        return res;
    }
};
