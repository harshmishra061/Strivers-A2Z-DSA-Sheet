//Using Constant Space
class Solution {
    void print(Node* head) {
        while(head) {
            cout << head->val << endl;
            if(head->random) cout << head->random->val << endl;
            head = head->next;
        }
        
    }
public:
    Node* copyRandomList(Node* head) {
        Node* itr = head;
        while(itr != NULL) {
            Node* node = new Node(itr->val);
            node->next = itr->next;
            itr->next = node;
            itr = itr->next->next;
        }
        itr = head;
        while(itr != NULL) {
            if(itr->random != NULL)
                itr->next->random = itr->random->next;
            itr = itr->next->next;
        }
        print(head);
        Node* dummy = new Node(-1);
        Node* itr2 = dummy;
        itr = head;
        while(itr != NULL) {
            itr2->next = itr->next;
            itr->next = itr->next->next;
            itr = itr->next;
            itr2 = itr2->next;
        }
        return dummy->next;
    }
};


// Using Map
class Solution {
public:
    Node* copyRandomList(Node* head) {
        map<Node*, Node*> mp;
        Node* itr = head;
        while(itr != NULL) {
            if(mp.find(itr) == mp.end()) {
                mp[itr] = new Node(itr->val);
            }
            if(itr->next != NULL) {
                if(mp.find(itr->next) == mp.end()) {
                    mp[itr->next] = new Node(itr->next->val);
                }
                mp[itr]->next = mp[itr->next];
            }

            if(itr->random != NULL) {
                if(mp.find(itr->random) == mp.end()) {
                    mp[itr->random] = new Node(itr->random->val);
                }
                mp[itr]->random = mp[itr->random];
            }

            itr = itr->next;
        }
        return mp[head];
    }
};
