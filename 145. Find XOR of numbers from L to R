// Pattern----
class Solution {
    int findXorTill(int x) {
        int r = x % 4;
        if(r == 0) return x;
        if(r == 1) return 1;
        if(r == 2) return x + 1;
        return 0;
    }
  public:
    int findXOR(int l, int r) {
        int xorTillr = findXorTill(r);
        int xorTilllm1 = findXorTill(l - 1);
        
        return (xorTillr ^ xorTilllm1);
    }
};





// My Approach
class Solution {
    int findXorTill(int x) {
        if(x == 0) return 0;
        if(x == 1) return 1;
        if(x == 2) return 3;
        if(x == 3) return 0;
        
        int bit = log2(x);
        int rem = x - (1 << bit) + 1;
        if(rem % 2 == 0) return findXorTill(x - (1 << bit));
        return (findXorTill(x - (1 << bit)) | (1 << bit));
    }
  public:
    int findXOR(int l, int r) {
        int xorTillr = findXorTill(r);
        int xorTilllm1 = findXorTill(l - 1);
        
        return (xorTillr ^ xorTilllm1);
    }
};
