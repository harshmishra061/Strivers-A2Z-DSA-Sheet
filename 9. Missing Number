class Solution {
public:
    int missingNumber(vector<int>& nums) {
        //using sum property
        int tsum = 0, arrsum = 0;
        for(int i = 0;i < nums.size();i++) {
            tsum += (i + 1);
            arrsum += nums[i];
        }
        return tsum - arrsum;
    }
};


class Solution {
public:
    int missingNumber(vector<int>& nums) {
        //using xor
        int val = 0;
        for(int i = 0;i < nums.size();i++) {
            val ^= (i + 1);
            val ^= nums[i];
        }
        return val;
    }
};

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        for(auto& num : nums) num++;
        int n = nums.size();
        for(int i = 0;i < n;i++) {
            int idx = abs(nums[i]) - 1;
            if(idx == n) continue;
            nums[idx] = -nums[idx];
        }
        for(int i = 0;i < n;i++) {
            if(nums[i] > 0) return i;
        }
        return n;
    }
};


class Solution {
public:
    int missingNumber(vector<int>& nums) {
        // binary search
        sort(nums.begin(), nums.end());
        int low = 0, high = nums.size() - 1, res = nums.size();
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] > mid) {
                res = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return res;
    }
};
