class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int val = 0;
        for(auto num : nums) val ^= num;
        return val;
    }
};
//IMP Using Binary Search
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        if(nums.size() == 1) return nums[0];
        if(nums[0] != nums[1]) return nums[0];
        if(nums[nums.size() - 2] != nums[nums.size() - 1]) return nums[nums.size() - 1];


        int low = 0, high = nums.size() - 1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid - 1] == nums[mid]) {
                int len = mid - low + 1;
                if(len % 2 == 1) {
                    high = mid - 2;
                } else {
                    low = mid + 1;
                }
            } else if(nums[mid] == nums[mid + 1]) {
                int len = high - mid + 1;
                if(len % 2 == 1) {
                    low = mid + 2;
                } else {
                    high = mid - 1;
                }
            } else {
                return nums[mid];
            }
        }
        return -1;
    }
};
