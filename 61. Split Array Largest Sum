class Solution {
    int helper(vector<int>& nums, int maxSubSum) {
        int split = 1, curr = nums[0];
        for(int i = 1;i < nums.size();i++) {
            if(curr + nums[i] <= maxSubSum) {
                curr += nums[i];
            } else {
                split++;
                curr = nums[i];
            }
        }
        return split;
    }
public:
    int splitArray(vector<int>& nums, int k) {
        int n = nums.size();
        int low = *max_element(nums.begin(), nums.end()), high = accumulate(nums.begin(), nums.end(), 0), res;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            int nOfSplit = helper(nums, mid);
            if(nOfSplit <= k) {
                res = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return res;
    }
};
