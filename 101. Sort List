/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {

    ListNode* findMiddleOfLL(ListNode* head) {
        ListNode* fast = head, *slow = head;
        while(fast->next != NULL && fast->next->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

    ListNode* merge(ListNode* head1, ListNode* head2) {
        ListNode* dummy = new ListNode(-1);
        ListNode* itr = dummy;
        while(head1 != NULL && head2 != NULL) {
            if(head1->val <= head2->val) {
                itr->next = head1;
                head1 = head1->next;
            } else {
                itr->next = head2;
                head2 = head2->next;
            }
            itr = itr->next;
        }
        if(head1 != NULL) itr->next = head1;
        if(head2 != NULL) itr->next = head2;

        return dummy->next;
    }
    ListNode* mergeSortLL(ListNode* head) {
        if(head == NULL || head->next == NULL) return head;
        // finding the middle of linkedlist
        ListNode* middle = findMiddleOfLL(head);

        ListNode* head1 = head;
        ListNode* head2 = middle->next;
        middle->next = NULL;
        //Sorting two parts separately
        head1 = mergeSortLL(head1);
        head2 = mergeSortLL(head2);
        // merge two sorted Linked List
        return merge(head1, head2);
    }
public:
    ListNode* sortList(ListNode* head) {
        return mergeSortLL(head);
    }
};
